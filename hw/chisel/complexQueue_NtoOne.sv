// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module ram_16x32(	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  input  [3:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [3:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:15];	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  always @(posedge W0_clk) begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    if (W0_en & 1'h1)	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      Memory[W0_addr] <= W0_data;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    reg [31:0] _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `ifdef RANDOMIZE_MEM_INIT	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        for (logic [4:0] i = 5'h0; i < 5'h10; i += 5'h1) begin
          _RANDOM_MEM = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
          Memory[i[3:0]] = _RANDOM_MEM;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
        end	// src/main/scala/chisel3/util/Decoupled.scala:256:91
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// src/main/scala/chisel3/util/Decoupled.scala:256:91
endmodule

module Queue16_UInt32(	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  input         clock,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
                reset,	// src/main/scala/chisel3/util/Decoupled.scala:243:7
  output        io_enq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_enq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input  [31:0] io_enq_bits,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  input         io_deq_ready,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output        io_deq_valid,	// src/main/scala/chisel3/util/Decoupled.scala:255:14
  output [31:0] io_deq_bits	// src/main/scala/chisel3/util/Decoupled.scala:255:14
);

  reg  [3:0] enq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg  [3:0] deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40
  reg        maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27
  wire       ptr_match = enq_ptr_value == deq_ptr_value;	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:260:33
  wire       empty = ptr_match & ~maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :261:{25,28}
  wire       full = ptr_match & maybe_full;	// src/main/scala/chisel3/util/Decoupled.scala:259:27, :260:33, :262:24
  wire       do_enq = ~full & io_enq_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :262:24, :286:19
  always @(posedge clock) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    if (reset) begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      enq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      deq_ptr_value <= 4'h0;	// src/main/scala/chisel3/util/Counter.scala:61:40
      maybe_full <= 1'h0;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
    end
    else begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      automatic logic do_deq = io_deq_ready & ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :261:25, :285:19
      if (do_enq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        enq_ptr_value <= enq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (do_deq)	// src/main/scala/chisel3/util/Decoupled.scala:51:35
        deq_ptr_value <= deq_ptr_value + 4'h1;	// src/main/scala/chisel3/util/Counter.scala:61:40, :77:24
      if (~(do_enq == do_deq))	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27, :276:{15,27}, :277:16
        maybe_full <= do_enq;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, :259:27
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      automatic logic [31:0] _RANDOM[0:0];	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// src/main/scala/chisel3/util/Decoupled.scala:243:7
        enq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][3:0];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        deq_ptr_value = _RANDOM[/*Zero width*/ 1'b0][7:4];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7
        maybe_full = _RANDOM[/*Zero width*/ 1'b0][8];	// src/main/scala/chisel3/util/Counter.scala:61:40, src/main/scala/chisel3/util/Decoupled.scala:243:7, :259:27
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  ram_16x32 ram_ext (	// src/main/scala/chisel3/util/Decoupled.scala:256:91
    .R0_addr (deq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .R0_en   (1'h1),	// src/main/scala/chisel3/util/Decoupled.scala:243:7
    .R0_clk  (clock),
    .R0_data (io_deq_bits),
    .W0_addr (enq_ptr_value),	// src/main/scala/chisel3/util/Counter.scala:61:40
    .W0_en   (do_enq),	// src/main/scala/chisel3/util/Decoupled.scala:51:35
    .W0_clk  (clock),
    .W0_data (io_enq_bits)
  );
  assign io_enq_ready = ~full;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :262:24, :286:19
  assign io_deq_valid = ~empty;	// src/main/scala/chisel3/util/Decoupled.scala:243:7, :261:25, :285:19
endmodule

module complexQueue_NtoOne(	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7
  input         clock,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7
                reset,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7
  output        io_in_0_ready,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  input         io_in_0_valid,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  input  [31:0] io_in_0_bits,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  output        io_in_1_ready,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  input         io_in_1_valid,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  input  [31:0] io_in_1_bits,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  output        io_in_2_ready,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  input         io_in_2_valid,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  input  [31:0] io_in_2_bits,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  output        io_in_3_ready,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  input         io_in_3_valid,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  input  [31:0] io_in_3_bits,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  input         io_out_ready,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  output        io_out_valid,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  output [31:0] io_out_bits_0,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
                io_out_bits_1,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
                io_out_bits_2,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
                io_out_bits_3,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
  output        io_allEmpty,	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
                io_anyFull	// src/main/scala/snax/xdma/commonCells/commonCells.scala:107:16
);

  wire _queues_3_io_enq_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
  wire _queues_3_io_deq_valid;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
  wire _queues_2_io_enq_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
  wire _queues_2_io_deq_valid;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
  wire _queues_1_io_enq_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
  wire _queues_1_io_deq_valid;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
  wire _queues_0_io_enq_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
  wire _queues_0_io_deq_valid;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
  wire io_out_valid_0 =
    _queues_0_io_deq_valid & _queues_1_io_deq_valid & _queues_2_io_deq_valid
    & _queues_3_io_deq_valid;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15, :120:62
  wire dequeue_ready = io_out_valid_0 & io_out_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:120:62, :121:38
  Queue16_UInt32 queues_0 (	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_queues_0_io_enq_ready),
    .io_enq_valid (io_in_0_valid),
    .io_enq_bits  (io_in_0_bits),
    .io_deq_ready (dequeue_ready),	// src/main/scala/snax/xdma/commonCells/commonCells.scala:121:38
    .io_deq_valid (_queues_0_io_deq_valid),
    .io_deq_bits  (io_out_bits_0)
  );
  Queue16_UInt32 queues_1 (	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_queues_1_io_enq_ready),
    .io_enq_valid (io_in_1_valid),
    .io_enq_bits  (io_in_1_bits),
    .io_deq_ready (dequeue_ready),	// src/main/scala/snax/xdma/commonCells/commonCells.scala:121:38
    .io_deq_valid (_queues_1_io_deq_valid),
    .io_deq_bits  (io_out_bits_1)
  );
  Queue16_UInt32 queues_2 (	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_queues_2_io_enq_ready),
    .io_enq_valid (io_in_2_valid),
    .io_enq_bits  (io_in_2_bits),
    .io_deq_ready (dequeue_ready),	// src/main/scala/snax/xdma/commonCells/commonCells.scala:121:38
    .io_deq_valid (_queues_2_io_deq_valid),
    .io_deq_bits  (io_out_bits_2)
  );
  Queue16_UInt32 queues_3 (	// src/main/scala/snax/xdma/commonCells/commonCells.scala:115:15
    .clock        (clock),
    .reset        (reset),
    .io_enq_ready (_queues_3_io_enq_ready),
    .io_enq_valid (io_in_3_valid),
    .io_enq_bits  (io_in_3_bits),
    .io_deq_ready (dequeue_ready),	// src/main/scala/snax/xdma/commonCells/commonCells.scala:121:38
    .io_deq_valid (_queues_3_io_deq_valid),
    .io_deq_bits  (io_out_bits_3)
  );
  assign io_in_0_ready = _queues_0_io_enq_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7, :115:15
  assign io_in_1_ready = _queues_1_io_enq_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7, :115:15
  assign io_in_2_ready = _queues_2_io_enq_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7, :115:15
  assign io_in_3_ready = _queues_3_io_enq_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7, :115:15
  assign io_out_valid = io_out_valid_0;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7, :120:62
  assign io_allEmpty =
    ~_queues_0_io_deq_valid & ~_queues_1_io_deq_valid & ~_queues_2_io_deq_valid
    & ~_queues_3_io_deq_valid;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7, :115:15, :125:{40,72}
  assign io_anyFull =
    ~_queues_0_io_enq_ready | ~_queues_1_io_enq_ready | ~_queues_2_io_enq_ready
    | ~_queues_3_io_enq_ready;	// src/main/scala/snax/xdma/commonCells/commonCells.scala:100:7, :115:15, :128:{39,71}
endmodule

